import { DataTypes, Model, Optional, Sequelize } from 'sequelize';
import { User } from './user.model'; // Import User model for associations

interface ConversationAttributes {
    id: number;
    name?: string;
    isGroup: boolean;
}

interface ConversationCreationAttributes extends Optional<ConversationAttributes, 'id'> {}

class Conversation extends Model<ConversationAttributes, ConversationCreationAttributes> implements ConversationAttributes {
    public id!: number;
    public name?: string;
    public isGroup!: boolean;

    // Timestamps
    public readonly createdAt!: Date;
    public readonly updatedAt!: Date;

    // Associations (defined in init function)
    // These are the magic methods generated by Sequelize for the 'participants' alias
    // from the Conversation.belongsToMany(User, { as: 'participants' }) association.
    public getParticipants!: () => Promise<User[]>;
    public addParticipant!: (user: User) => Promise<void>;
    public addParticipants!: (users: User[]) => Promise<void>; // <--- This is the one your route is calling
    public setParticipants!: (users: User[]) => Promise<void>;
    public removeParticipant!: (user: User) => Promise<void>;
    public removeParticipants!: (users: User[]) => Promise<void>;
    public hasParticipant!: (user: User) => Promise<boolean>; // <--- This was the previous fix
    public hasParticipants!: (users: User[]) => Promise<boolean>;
    public countParticipants!: () => Promise<number>;
}

const initConversationModel = (sequelize: Sequelize) => {
    Conversation.init(
        {
            id: {
                type: DataTypes.INTEGER.UNSIGNED,
                autoIncrement: true,
                primaryKey: true,
            },
            name: {
                type: DataTypes.STRING,
                allowNull: true,
            },
            isGroup: {
                type: DataTypes.BOOLEAN,
                allowNull: false,
                defaultValue: false,
            },
        },
        {
            tableName: 'conversations',
            sequelize,
            timestamps: true,
        }
    );
};

export { Conversation, initConversationModel };